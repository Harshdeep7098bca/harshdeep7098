#include <iostream>
using namespace std;

class BCA_OOPS {
private:
    int var1;
    int var2;
public:

    BCA_OOPS() {
        var1 = 0;
        var2 = 0;
    }


    BCA_OOPS(int v1, int v2) {
        this->var1 = v1;
        this->var2 = v2;
    }

    void display() {
        cout << "var1: " << var1 << endl;
        cout << "var2: " << var2 << endl;
    }

    void copyData(const BCA_OOPS& obj) {
        this->var1 = obj.var1;
        this->var2 = obj.var2;
    }

    void decrementValues() {
        if (var1 >= 0 && var1 <= 10)
            var1 -= 2;
        else if (var1 > 10)
            var1 -= 5;

        if (var2 >= 0 && var2 <= 10)
            var2 -= 2;
        else if (var2 > 10)
            var2 -= 5;
    }
};

 {
    cout << "Displaying values from outside the class:" << endl;
    cout << "var1: " << obj.var1 << endl;
    cout << "var2: " << obj.var2 << endl;
}

int main() {
    BCA_OOPS obj1; // Default constructor
    BCA_OOPS obj2(15, 8); // Parameterized constructor

    cout << "Values of obj1:" << endl;
    obj1.display();
    cout << endl;

    cout << "Values of obj2:" << endl;
    obj2.display();
    cout << endl;

    obj1.copyData(obj2);
    cout << "Values of obj1 after copying data from obj2:" << endl;
    obj1.display();
    cout << endl;

    obj1.decrementValues();
    cout << "Values of obj1 after decrementing:" << endl;
    obj1.display();
    cout << endl;

    // Displaying values using the function outside the class
    displayBCA_OOPS(obj1);

    return 0;
}
